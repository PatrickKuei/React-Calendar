{"version":3,"sources":["component/ButtonAndDate.js","component/Head.js","component/hourlySchedule.js","component/EachDay.js","component/Content.js","App.js","serviceWorker.js","i18n.js","index.js"],"names":["ButtonAndDate","DATE","dayData","leftDate","setLeftDate","rightDate","setRightDate","daysInMonth","thisSundayDate","setThisSundayDate","nextSundayDate","setNextSundayDate","inThePast","today","date","month","showDate","year","className","disabled","onClick","day","Header","t","i18n","HourlySchedule","AvaDay","Booked","eachDayIs","startBOOKED","endBOOKED","avaDateArray_id","map","item","id","avaDateArray_Start","Date","start","strAvaDate_Start","toLocaleDateString","time","toLocaleTimeString","hour","minute","avaDateArray_End","end","strAvaDate_End","bookedArray_Start","daySchedule","pushAvatime","i","push","length","toString","j","sort","a","b","localeCompare","data","style","color","key","EachDay","chineseDay","IsNextMonth","past","Content","sevenDays","countDays","AvaDayJson","BookedJson","useState","available","setAvailable","booked","setBooked","isALoaded","setIsALoaded","isBLoaded","setIsBLoaded","useEffect","fetchAvailableData","fetchBookedData","fetch","then","response","json","theJson","login","App","getFullYear","getMonth","getDate","getDay","isThisMonth","useTranslation","handleClick","lang","changeLanguage","Head","Boolean","window","location","hostname","match","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","whitelist","interpolation","escapeValue","ReactDOM","render","fallback","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.738e9c4e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst ButtonAndDate = ({ DATE, dayData }) => {\r\n  const leftDate = dayData.leftDate;\r\n  const setLeftDate = dayData.setLeftDate;\r\n  const rightDate = dayData.rightDate;\r\n  const setRightDate = dayData.setRightDate;\r\n  const daysInMonth = dayData.daysInMonth;\r\n  const thisSundayDate = dayData.thisSundayDate;\r\n  const setThisSundayDate = dayData.setThisSundayDate;\r\n  const nextSundayDate = dayData.nextSundayDate;\r\n  const setNextSundayDate = dayData.setNextSundayDate;\r\n\r\n  /* 宣告左邊和右邊日期進入下個月的function*/\r\n  const nextLeftMonth = () => {\r\n    setLeftDate({\r\n      year: leftDate.year,\r\n      month: leftDate.month + 1,\r\n      date: leftDate.date,\r\n      day: leftDate.day,\r\n    });\r\n  };\r\n  const nextRightMonth = () => {\r\n    setRightDate({\r\n      year: rightDate.year,\r\n      month: rightDate.month + 1,\r\n      date: rightDate.date,\r\n      day: rightDate.day,\r\n    });\r\n  };\r\n\r\n  /* 按右邊按鈕時會同時將兩邊日期前進到下一週，且會自動進入下個月 */\r\n  const nextWeek = () => {\r\n    return (\r\n      nextSundayDate + 7 <= daysInMonth(rightDate.year, rightDate.month)\r\n        ? setNextSundayDate(nextSundayDate + 7)\r\n        : (setNextSundayDate(\r\n            nextSundayDate + 7 - daysInMonth(rightDate.year, rightDate.month)\r\n          ),\r\n          nextRightMonth()),\r\n      thisSundayDate + 7 <= daysInMonth(leftDate.year, leftDate.month)\r\n        ? setThisSundayDate(thisSundayDate + 7)\r\n        : (setThisSundayDate(\r\n            thisSundayDate + 7 - daysInMonth(leftDate.year, leftDate.month)\r\n          ),\r\n          nextLeftMonth())\r\n    );\r\n  };\r\n\r\n  /* 宣告左邊和右邊日期進入上個月的function */\r\n  const lastOtherMonth = () => {\r\n    setRightDate({\r\n      year: rightDate.year,\r\n      month: rightDate.month - 1,\r\n      date: rightDate.date,\r\n      day: rightDate.day,\r\n    });\r\n  };\r\n  const lastMonth = () => {\r\n    setLeftDate({\r\n      year: leftDate.year,\r\n      month: leftDate.month - 1,\r\n      date: leftDate.date,\r\n      day: leftDate.day,\r\n    });\r\n  };\r\n\r\n  /* 按左邊按鈕時會同時將兩邊日期前進到上一週，且會自動進入上個月 */\r\n  const lastPeriod = () => {\r\n    return (\r\n      nextSundayDate - 7 >= 1\r\n        ? setNextSundayDate(nextSundayDate - 7)\r\n        : (setNextSundayDate(\r\n            nextSundayDate -\r\n              7 +\r\n              daysInMonth(rightDate.year, rightDate.month - 1)\r\n          ),\r\n          lastOtherMonth()),\r\n      thisSundayDate - 7 >= 1\r\n        ? setThisSundayDate(thisSundayDate - 7)\r\n        : (setThisSundayDate(\r\n            thisSundayDate - 7 + daysInMonth(leftDate.year, leftDate.month - 1)\r\n          ),\r\n          lastMonth())\r\n    );\r\n  };\r\n\r\n  /* 判斷是否是過去的週 */\r\n  const inThePast =\r\n    thisSundayDate > dayData.today.date || leftDate.month > dayData.today.month\r\n      ? false\r\n      : true;\r\n\r\n  /* 秀出日期 */\r\n  const showDate =\r\n    leftDate.month === rightDate.month\r\n      ? leftDate.year +\r\n        \"/\" +\r\n        leftDate.month +\r\n        \"/\" +\r\n        thisSundayDate +\r\n        \"-\" +\r\n        nextSundayDate\r\n      : leftDate.year +\r\n        \"/\" +\r\n        leftDate.month +\r\n        \"/\" +\r\n        thisSundayDate +\r\n        \"-\" +\r\n        rightDate.month +\r\n        \"/\" +\r\n        nextSundayDate;\r\n  return (\r\n    <div className=\"dateDiv\">\r\n      <div className=\"btnDiv\">\r\n        <button disabled={inThePast} className=\"btn\" onClick={lastPeriod}>\r\n          &#8249;\r\n        </button>\r\n\r\n        <button className=\"btn\" onClick={nextWeek}>\r\n          &#8250;\r\n        </button>\r\n      </div>\r\n      <div className=\"flex\">\r\n        <h2>{showDate}</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ButtonAndDate;\r\n","import React from \"react\";\r\nimport ButtonAndDate from \"./ButtonAndDate\";\r\nimport { Translation } from \"react-i18next\";\r\n\r\nconst Header = ({ DATE, dayData }) => {\r\n  return (\r\n    <div className=\"headerDiv\">\r\n      <div className=\"titleDiv\">\r\n        <Translation>{(t, { i18n }) => <h1>{t(\"Title.1\")}</h1>}</Translation>\r\n      </div>\r\n      <div className=\"inforDiv\">\r\n        <ButtonAndDate DATE={DATE} dayData={dayData} />\r\n        <div className=\"gmtDiv\">\r\n          <Translation>{(t, { i18n }) => <p>{t(\"GMT Time.1\")}</p>}</Translation>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst HourlySchedule = ({ AvaDay, Booked, eachDayIs }) => {\r\n  /* 判斷是不是被預定；\r\n  分解JSON資料成字串的年月日來做比對；\r\n  被預訂的資料純比對用，不轉字串 */\r\n  let startBOOKED = false;\r\n  let endBOOKED = false;\r\n  const avaDateArray_id = AvaDay.map((item) => item.id);\r\n  const avaDateArray_Start = AvaDay.map((item) => new Date(item.start));\r\n  const strAvaDate_Start = {\r\n    year: avaDateArray_Start.map((DATE) =>\r\n      DATE.toLocaleDateString(\"en-GB\", {\r\n        year: \"numeric\",\r\n      })\r\n    ),\r\n    month: avaDateArray_Start.map((DATE) =>\r\n      DATE.toLocaleDateString(\"en-GB\", {\r\n        month: \"2-digit\",\r\n      })\r\n    ),\r\n    date: avaDateArray_Start.map((DATE) =>\r\n      DATE.toLocaleDateString(\"en-GB\", {\r\n        day: \"2-digit\",\r\n      })\r\n    ),\r\n    time: avaDateArray_Start.map((DATE) =>\r\n      DATE.toLocaleTimeString(\"en-GB\", {\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n      })\r\n    ),\r\n  };\r\n  const avaDateArray_End = AvaDay.map((item) => new Date(item.end));\r\n  const strAvaDate_End = {\r\n    year: avaDateArray_End.map((DATE) =>\r\n      DATE.toLocaleDateString(\"en-GB\", {\r\n        year: \"numeric\",\r\n      })\r\n    ),\r\n    month: avaDateArray_End.map((DATE) =>\r\n      DATE.toLocaleDateString(\"en-GB\", {\r\n        month: \"2-digit\",\r\n      })\r\n    ),\r\n    date: avaDateArray_End.map((DATE) =>\r\n      DATE.toLocaleDateString(\"en-GB\", {\r\n        day: \"2-digit\",\r\n      })\r\n    ),\r\n    time: avaDateArray_End.map((DATE) =>\r\n      DATE.toLocaleTimeString(\"en-GB\", {\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n      })\r\n    ),\r\n  };\r\n  const bookedArray_Start = Booked.map((item) => new Date(item.start));\r\n\r\n  /* 宣告一個空陣列來放一天全部行程；\r\n  一個功能來把時間放進陣列中；\r\n  用迴圈比對日期和DB資料的日期：\r\n    「若DB中有和該日相同的\"年\"\"月\"\"日\"，則執行放入陣列功能」；\r\n    用迴圈比對兩個JSON的日期：\r\n    「若可預定的結束日期不等於被預訂的開始日期，則將文字顯示成綠色；反之灰色。\r\n    若可預訂的開始日期等於被預訂的結束日期，則顯示灰色；反之綠色」 */\r\n  const daySchedule = [];\r\n  const pushAvatime = (i) => {\r\n    daySchedule.push({\r\n      id: avaDateArray_id[i],\r\n      start: strAvaDate_Start.time[i],\r\n      end: strAvaDate_End.time[i],\r\n    });\r\n  };\r\n  for (let i = 0; i < avaDateArray_Start.length; i++) {\r\n    if (\r\n      eachDayIs.year.toString() === strAvaDate_Start.year[i] &&\r\n      eachDayIs.month.toString() === strAvaDate_Start.month[i] &&\r\n      eachDayIs.date.toString() === strAvaDate_Start.date[i]\r\n    ) {\r\n      pushAvatime(i);\r\n      for (let j = 0; j < bookedArray_Start.length; j++) {\r\n        if (AvaDay[i].end !== Booked[j].start) {\r\n          if (AvaDay[i].start === Booked[j].end) {\r\n            endBOOKED = true;\r\n          } else {\r\n            startBOOKED = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /* 將陣列排序，依數字小到大 */\r\n  daySchedule.sort(function (a, b) {\r\n    return a.start.localeCompare(b.start);\r\n  });\r\n\r\n  return (\r\n    <div className=\"hourlyDiv\">\r\n      {daySchedule.map((data) => (\r\n        <div>\r\n          <h4 style={{ color: startBOOKED ? \"gray\" : \"green\" }} key={data.id}>\r\n            {data.start}\r\n          </h4>\r\n          <h4 style={{ color: endBOOKED ? \"gray\" : \"green\" }}>{data.end}</h4>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HourlySchedule;\r\n","import React from \"react\";\r\nimport HourlySchedule from \"./hourlySchedule\";\r\n\r\nconst EachDay = ({\r\n  date,\r\n  chineseDay,\r\n  AvaDay,\r\n  Booked,\r\n  dayData,\r\n  IsNextMonth,\r\n}) => {\r\n  /* 打包每一天的年月日\r\n  只有幾月幾號用date */\r\n  let eachDayIs = {\r\n    year: dayData.leftDate.year,\r\n    month: dayData.leftDate.month,\r\n    date: date,\r\n    day: chineseDay,\r\n  };\r\n\r\n  /* 月份要跟著日期進位並且把<10的月份和日期補零 */\r\n  eachDayIs.month = IsNextMonth ? eachDayIs.month + 1 : eachDayIs.month;\r\n  eachDayIs.month =\r\n    eachDayIs.month < 10 ? \"0\" + eachDayIs.month : eachDayIs.month;\r\n  eachDayIs.date = eachDayIs.date < 10 ? \"0\" + eachDayIs.date : eachDayIs.date;\r\n\r\n  /* 判斷是否是過去的日子 */\r\n  let past = false;\r\n  past =\r\n    eachDayIs.month <= dayData.today.month && date < dayData.today.date\r\n      ? true\r\n      : false;\r\n  return (\r\n    <div className=\"eachDayDiv\">\r\n      <div className={past ? \"toGray\" : \"acvatedDiv\"}></div>\r\n      <div className={past ? \"textToGray\" : \"weekNumberDiv\"}>\r\n        <h2>{chineseDay}</h2>\r\n        <h2>{eachDayIs.date}</h2>\r\n      </div>\r\n      <HourlySchedule AvaDay={AvaDay} Booked={Booked} eachDayIs={eachDayIs} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EachDay;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport EachDay from \"./EachDay\";\r\nimport AvaDayJson from \"../available.json\";\r\nimport BookedJson from \"../booked.json\";\r\n\r\n/* 顯示下半部日期、時間、行程的部分 */\r\n\r\nconst Content = ({ dayData }) => {\r\n  /* 宣告一個陣列來顯示中文星期；\r\n    一個一週陣列來實現 loop 7個day(； \r\n    每天的日期(號)，初始值為當週週日的日期(號)；\r\n    一個計數用的日期，來判定是否超過31號；\r\n    把該月天數抓出來；\r\n    是否超過31號和日期是否等於零 */\r\n\r\n  const chineseDay = [\"日\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\"];\r\n  const sevenDays = [];\r\n  let thisSundayDate = dayData.thisSundayDate;\r\n  let date = thisSundayDate;\r\n  let countDays = thisSundayDate;\r\n  let daysInMonth = dayData.daysInMonth(\r\n    dayData.leftDate.year,\r\n    dayData.leftDate.month\r\n  ); //左邊月份的日子\r\n  let IsNextMonth = false;\r\n\r\n  /* 若沒取到後端資料 */\r\n  const AvaDay = AvaDayJson;\r\n  const Booked = BookedJson;\r\n\r\n  /* 一週7天都要判斷日期是否超過該月；日期是否為零；\r\n  從該週第一天(週日)開始+0~7，並指定給每一天的日期(號)；\r\n  若超過，將日期(號)減掉該月總日子 e.g. 32-31=1號；\r\n  把每一天放進一週陣列中；\r\n  */\r\n  for (let i = 0; i < 7; i++) {\r\n    IsNextMonth = countDays > daysInMonth ? true : false;\r\n    if (!IsNextMonth && countDays !== daysInMonth) {\r\n      date = thisSundayDate + i;\r\n      countDays = thisSundayDate + i;\r\n    } else {\r\n      date = thisSundayDate + i - daysInMonth;\r\n      countDays = thisSundayDate + i;\r\n      IsNextMonth = true;\r\n    }\r\n    if (date === 0) {\r\n      date = daysInMonth;\r\n      IsNextMonth = false;\r\n    }\r\n    sevenDays.push(\r\n      <EachDay\r\n        date={date}\r\n        chineseDay={chineseDay[i]}\r\n        AvaDay={AvaDay}\r\n        Booked={Booked}\r\n        dayData={dayData}\r\n        IsNextMonth={IsNextMonth}\r\n        key={i}\r\n      />\r\n    );\r\n  }\r\n  /* 取後端資料；目前沒有 */\r\n  const [available, setAvailable] = useState({});\r\n  const [booked, setBooked] = useState({});\r\n  const url = \"\";\r\n  const [isALoaded, setIsALoaded] = useState(false);\r\n  const [isBLoaded, setIsBLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchAvailableData();\r\n    fetchBookedData();\r\n  }, []);\r\n\r\n  const fetchAvailableData = () => {\r\n    fetch(url)\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((theJson) => {\r\n        setAvailable(theJson);\r\n        setIsALoaded(true);\r\n      });\r\n  };\r\n  const fetchBookedData = () => {\r\n    fetch(url)\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((theJson) => {\r\n        setBooked(theJson);\r\n        setIsBLoaded(true);\r\n      });\r\n  };\r\n\r\n  /* 若沒取到後端資料，先用暫定資料製作內容 */\r\n  if (!isALoaded || !isBLoaded) {\r\n    return <div className=\"contentDiv\">{sevenDays}</div>;\r\n  }\r\n  return (\r\n    <div>\r\n      <p>{available.map((item) => item.login)}</p>\r\n      <p>{booked.map((item) => item.id)}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Content;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./component/Head\";\nimport Content from \"./component/Content\";\nimport { translate, Trans, useTranslation } from \"react-i18next\";\n\nfunction App() {\n  /* 宣告兩個今天的年月日，一個用在左邊週日日期；一個用在右邊週日日期 \n  只有幾月幾號用date*/\n  const DATE = new Date();\n  const today = {\n    year: DATE.getFullYear(),\n    month: DATE.getMonth() + 1,\n    date: DATE.getDate(), //號\n    day: DATE.getDay(), //星期、幾天\n  };\n  const [leftDate, setLeftDate] = useState(today);\n  /* 宣告一個月有幾天，左邊的週日是幾號；右邊的週日是幾號 */\n  const daysInMonth = (year, month) => {\n    return new Date(year, month, 0).getDate();\n  };\n  const [thisSundayDate, setThisSundayDate] = useState(\n    leftDate.date - leftDate.day > 0\n      ? leftDate.date - leftDate.day\n      : leftDate.date -\n          leftDate.day +\n          daysInMonth(leftDate.year, leftDate.month - 1)\n  );\n  /* 判斷右邊日期是否同一個月 */\n  const isThisMonth =\n    thisSundayDate + 7 <= daysInMonth(leftDate.year, leftDate.month)\n      ? true\n      : false;\n  const [nextSundayDate, setNextSundayDate] = useState(\n    isThisMonth\n      ? thisSundayDate + 7\n      : thisSundayDate + 7 - daysInMonth(leftDate.year, leftDate.month)\n  );\n  const [rightDate, setRightDate] = useState({\n    year: leftDate.year,\n    month: isThisMonth ? leftDate.month : leftDate.month + 1,\n    date: leftDate.date, //號\n    day: leftDate.day, //星期、幾天\n  });\n  /* 把要傳的props打包 */\n  const dayData = {\n    today,\n    leftDate,\n    setLeftDate,\n    rightDate,\n    setRightDate,\n    daysInMonth,\n    thisSundayDate,\n    setThisSundayDate,\n    nextSundayDate,\n    setNextSundayDate,\n  };\n\n  const { t, i18n } = useTranslation();\n  const handleClick = (lang) => {\n    i18n.changeLanguage(lang);\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"lang\">\n        <button onClick={() => handleClick(\"en\")}>English</button>\n        <button onClick={() => handleClick(\"chi\")}>Chinese</button>\n      </div>\n      <Header DATE={DATE} dayData={dayData} t={t} />\n      <Content DATE={DATE} dayData={dayData} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\nimport Backend from \"i18next-http-backend\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\n// not like to use this?\r\n// have a look at the Quick start guide\r\n// for passing in lng and translations on init\r\n\r\nconst Languages = [\"chi\", \"en\"];\r\ni18n\r\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\r\n  // learn more: https://github.com/i18next/i18next-http-backend\r\n  .use(Backend)\r\n  // detect user language\r\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\r\n  .use(LanguageDetector)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n  .init({\r\n    fallbackLng: \"en\",\r\n    debug: true,\r\n    whitelist: Languages,\r\n\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./i18n\";\n\nReactDOM.render(\n  <Suspense fallback={<div>Loading...</div>}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Suspense>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}