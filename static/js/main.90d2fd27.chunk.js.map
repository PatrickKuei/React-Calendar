{"version":3,"sources":["component/ButtonAndDate.js","component/Head.js","component/handleData.js","component/hourlySchedule.js","component/EachDay.js","component/FetchData.js","component/Content.js","App.js","serviceWorker.js","i18n.js","index.js"],"names":["ButtonAndDate","dayData","showDate","thisSunday","year","month","date","nextSunday","nextWeek","today","day","lastWeek","className","disabled","Date","onClick","setToday","Header","handleData","AvaDay","Booked","avaDateArray_id","map","item","id","avaDateArray_Start","start","avaDateArray_End","end","bookedArray_Start","stringAvaDate_Start","time","DATE","toLocaleTimeString","hour","minute","stringAvaDate_End","HourlySchedule","past","data","startBOOKED","endBOOKED","daySchedule","pushAvatime","i","push","setHours","getTime","j","sort","a","b","localeCompare","key","style","color","EachDay","chineseDay","thisDate","getDate","FetchData","url","useState","availableTime","setAvailableTime","bookedTime","setBookedTime","isALoaded","setIsALoaded","isBLoaded","setIsBLoaded","useEffect","fetchAvailableData","fetchBookedData","fetch","then","response","json","theJson","Content","fetchData","sevenDays","make7days","AvaDayJson","BookedJson","App","getFullYear","getMonth","getDay","calThisSunday","calNextSunday","useTranslation","t","i18n","Head","Boolean","window","location","hostname","match","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","whitelist","interpolation","escapeValue","ReactDOM","render","fallback","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.90d2fd27.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst ButtonAndDate = ({ dayData }) => {\r\n  /* 秀出日期 */\r\n  const showDate =\r\n    dayData.thisSunday.year +\r\n    \"/\" +\r\n    (dayData.thisSunday.month + 1) +\r\n    \"/\" +\r\n    dayData.thisSunday.date +\r\n    \"-\" +\r\n    dayData.nextSunday.date;\r\n\r\n  /* 下個週就是今天日期+7 */\r\n  const nextWeek = {\r\n    year: dayData.today.year,\r\n    month: dayData.today.month,\r\n    date: dayData.today.date + 7,\r\n    day: dayData.today.day,\r\n  };\r\n  /* 上個週就是今天日期-7 */\r\n  const lastWeek = {\r\n    year: dayData.today.year,\r\n    month: dayData.today.month,\r\n    date: dayData.today.date - 7,\r\n    day: dayData.today.day,\r\n  };\r\n\r\n  return (\r\n    <div className=\"dateDiv\">\r\n      <div className=\"btnDiv\">\r\n        <button\r\n          disabled={\r\n            new Date() >\r\n            new Date(\r\n              dayData.thisSunday.year,\r\n              dayData.thisSunday.month,\r\n              dayData.thisSunday.date\r\n            )\r\n          }\r\n          className=\"btn\"\r\n          onClick={() => dayData.setToday(lastWeek)}\r\n        >\r\n          &#8249;\r\n        </button>\r\n\r\n        <button className=\"btn\" onClick={() => dayData.setToday(nextWeek)}>\r\n          &#8250;\r\n        </button>\r\n      </div>\r\n      <div className=\"flex\">\r\n        <h2>{showDate}</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ButtonAndDate;\r\n","import React from \"react\";\r\nimport ButtonAndDate from \"./ButtonAndDate\";\r\n/* import { Translation } from \"react-i18next\"; */\r\n\r\nconst Header = ({ dayData }) => {\r\n  return (\r\n    <div className=\"headerDiv\">\r\n      <div className=\"titleDiv\">\r\n        {/* <Translation>{(t, { i18n }) => <h1>{t(\"Title.1\")}</h1>}</Translation> */}\r\n        <h1>Available Times</h1>\r\n      </div>\r\n      <div className=\"inforDiv\">\r\n        <ButtonAndDate dayData={dayData} />\r\n        <div className=\"gmtDiv\">\r\n          {/* <Translation>{(t, { i18n }) => <p>{t(\"GMT Time.1\")}</p>}</Translation> */}\r\n          <p>\r\n            * All the timings listed are in your timezone: HongKong (GMT+08:00)\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","/* 將db資料取出，分解成可預定日期的開始和結束；不可預定日期的開始；\r\n將時間設定成2位數，回傳 */\r\n\r\nconst handleData = (AvaDay, Booked) => {\r\n  const avaDateArray_id = AvaDay.map((item) => item.id);\r\n  const avaDateArray_Start = AvaDay.map((item) => new Date(item.start));\r\n  const avaDateArray_End = AvaDay.map((item) => new Date(item.end));\r\n  const bookedArray_Start = Booked.map((item) => new Date(item.start));\r\n\r\n  const stringAvaDate_Start = {\r\n    time: avaDateArray_Start.map((DATE) =>\r\n      DATE.toLocaleTimeString(\"en-GB\", {\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n      })\r\n    ),\r\n  };\r\n  const stringAvaDate_End = {\r\n    time: avaDateArray_End.map((DATE) =>\r\n      DATE.toLocaleTimeString(\"en-GB\", {\r\n        hour: \"2-digit\",\r\n        minute: \"2-digit\",\r\n      })\r\n    ),\r\n  };\r\n  const { ...data } = {\r\n    avaDateArray_id,\r\n    avaDateArray_Start,\r\n    avaDateArray_End,\r\n    bookedArray_Start,\r\n    stringAvaDate_Start,\r\n    stringAvaDate_End,\r\n  };\r\n  return data;\r\n};\r\n\r\nexport default handleData;\r\n","import React from \"react\";\r\nimport handleData from \"./handleData\";\r\n\r\nconst HourlySchedule = ({ AvaDay, Booked, past, date }) => {\r\n  const { ...data } = handleData(AvaDay, Booked);\r\n\r\n  let startBOOKED = false; //被訂走的日期要改色\r\n  let endBOOKED = false;\r\n  /* 宣告一個空陣列來放一天全部行程；\r\n  一個功能來把時間放進陣列中；\r\n  用迴圈比對日期和DB資料的日期：\r\n    「若DB中有和該日相同的\"年\"\"月\"\"日\"，則執行放入陣列功能」；\r\n    用迴圈比對兩個JSON的日期：\r\n    「若可預定的結束日期不等於被預訂的開始日期，則將文字顯示成綠色；反之灰色。\r\n    若可預訂的開始日期等於被預訂的結束日期，則顯示灰色；反之綠色」 */\r\n  const daySchedule = [];\r\n  const pushAvatime = (i) => {\r\n    daySchedule.push({\r\n      id: data.avaDateArray_id[i],\r\n      start: data.stringAvaDate_Start.time[i],\r\n      end: data.stringAvaDate_End.time[i],\r\n    });\r\n  };\r\n\r\n  if (!past) {\r\n    for (let i in data.avaDateArray_Start) {\r\n      if (data.avaDateArray_Start[i].setHours(0, 0, 0, 0) === date.getTime()) {\r\n        pushAvatime(i);\r\n        for (let j in data.bookedArray_Start) {\r\n          if (AvaDay[i].end !== Booked[j].start) {\r\n            if (AvaDay[i].start === Booked[j].end) {\r\n              endBOOKED = true;\r\n            } else {\r\n              startBOOKED = true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /* 將陣列排序，依數字小到大 */\r\n  daySchedule.sort(function (a, b) {\r\n    return a.start.localeCompare(b.start);\r\n  });\r\n\r\n  return (\r\n    <div className=\"hourlyDiv\">\r\n      {daySchedule.map((data) => (\r\n        <div key={data.id}>\r\n          <h4 style={{ color: startBOOKED ? \"gray\" : \"green\" }}>\r\n            {data.start}\r\n          </h4>\r\n          <h4 style={{ color: endBOOKED ? \"gray\" : \"green\" }}>{data.end}</h4>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HourlySchedule;\r\n","import React from \"react\";\r\nimport HourlySchedule from \"./hourlySchedule\";\r\n\r\nconst EachDay = ({ date, chineseDay, AvaDay, Booked }) => {\r\n  /* 對日期補零 */\r\n  const thisDate = date.getDate() < 10 ? \"0\" + date.getDate() : date.getDate();\r\n\r\n  /* 判斷是否是過去的日子 */\r\n  const past = date < new Date().setHours(0, 0, 0, 0) ? true : false;\r\n  return (\r\n    <div className=\"eachDayDiv\">\r\n      <div className={past ? \"toGray\" : \"acvatedDiv\"}></div>\r\n      <div className={past ? \"textToGray\" : \"weekNumberDiv\"}>\r\n        <h2>{chineseDay}</h2>\r\n        <h2>{thisDate}</h2>\r\n\r\n        <HourlySchedule\r\n          AvaDay={AvaDay}\r\n          Booked={Booked}\r\n          past={past}\r\n          date={date}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EachDay;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst FetchData = (url) => {\r\n  /* 取後端資料；目前沒有 */\r\n  const [availableTime, setAvailableTime] = useState({});\r\n  const [bookedTime, setBookedTime] = useState({});\r\n  const [isALoaded, setIsALoaded] = useState(false);\r\n  const [isBLoaded, setIsBLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchAvailableData();\r\n    fetchBookedData();\r\n  }, []);\r\n\r\n  const fetchAvailableData = () => {\r\n    fetch(url)\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((theJson) => {\r\n        setAvailableTime(theJson);\r\n        setIsALoaded(true);\r\n      });\r\n  };\r\n  const fetchBookedData = () => {\r\n    fetch(url)\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((theJson) => {\r\n        setBookedTime(theJson);\r\n        setIsBLoaded(true);\r\n      });\r\n  };\r\n\r\n  return {\r\n    availableTime,\r\n    bookedTime,\r\n    isALoaded,\r\n    isBLoaded,\r\n  };\r\n};\r\n\r\nexport default FetchData;\r\n","import React from \"react\";\r\nimport EachDay from \"./EachDay\";\r\nimport AvaDayJson from \"../available.json\";\r\nimport BookedJson from \"../booked.json\";\r\nimport FetchData from \"./FetchData\";\r\n\r\n/* 顯示下半部日期、時間、行程的部分 */\r\nconst Content = ({ dayData }) => {\r\n  const { ...fetchData } = FetchData(\"url\");\r\n  const chineseDay = [\"日\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\"];\r\n  const sevenDays = [];\r\n\r\n  const make7days = (AvaDay, Booked) => {\r\n    for (let i = 0; i < 7; i++) {\r\n      const date = new Date(\r\n        dayData.thisSunday.year,\r\n        dayData.thisSunday.month,\r\n        dayData.thisSunday.date + i\r\n      );\r\n      sevenDays.push(\r\n        <EachDay\r\n          date={date}\r\n          chineseDay={chineseDay[i]}\r\n          AvaDay={AvaDay}\r\n          Booked={Booked}\r\n          dayData={dayData}\r\n          key={i}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  /* 若沒取到後端資料 */\r\n  if (!fetchData.isALoaded || !fetchData.isBLoaded) {\r\n    const AvaDay = AvaDayJson;\r\n    const Booked = BookedJson;\r\n    make7days(AvaDay, Booked);\r\n    return <div className=\"contentDiv\">{sevenDays}</div>;\r\n  } else {\r\n    const AvaDay = fetchData.availableTime;\r\n    const Booked = fetchData.bookedTime;\r\n    make7days(AvaDay, Booked);\r\n    return <div className=\"contentDiv\">{sevenDays}</div>;\r\n  }\r\n};\r\n\r\nexport default Content;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./component/Head\";\nimport Content from \"./component/Content\";\nimport { useTranslation } from \"react-i18next\";\n\nfunction App() {\n  /* 宣告今天日期，算出這週日和下週日日期 */\n  const [today, setToday] = useState({\n    year: new Date().getFullYear(),\n    month: new Date().getMonth(),\n    date: new Date().getDate(), //號\n    day: new Date().getDay(), //星期、幾天\n  });\n  const calThisSunday = today.date - today.day;\n  const thisSunday = {\n    year: new Date(today.year, today.month, calThisSunday).getFullYear(),\n    month: new Date(today.year, today.month, calThisSunday).getMonth(),\n    date: new Date(today.year, today.month, calThisSunday).getDate(),\n  };\n  const calNextSunday = 7 - today.day + today.date;\n  const nextSunday = {\n    year: new Date(today.year, today.month, calNextSunday).getFullYear(),\n    month: new Date(today.year, today.month, calNextSunday).getMonth() + 1,\n    date: new Date(today.year, today.month, calNextSunday).getDate(),\n  };\n  const dayData = {\n    today,\n    setToday,\n    thisSunday,\n    nextSunday,\n  };\n\n  /* 實現i18n */\n  const { t, i18n } = useTranslation();\n  const handleClick = (lang) => {\n    i18n.changeLanguage(lang);\n  };\n  return (\n    <div className=\"App\">\n      {/*       <div className=\"lang\">\n        <button onClick={() => handleClick(\"en\")}>English</button>\n        <button onClick={() => handleClick(\"chi\")}>Chinese</button>\n        <h1>{t(\"Thanks.1\")}</h1>\n      </div> */}\n      <Header dayData={dayData} />\n      <Content dayData={dayData} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\nimport Backend from \"i18next-http-backend\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\n// not like to use this?\r\n// have a look at the Quick start guide\r\n// for passing in lng and translations on init\r\n\r\nconst Languages = [\"chi\", \"en\"];\r\ni18n\r\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\r\n  // learn more: https://github.com/i18next/i18next-http-backend\r\n  .use(Backend)\r\n  // detect user language\r\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\r\n  .use(LanguageDetector)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n  .init({\r\n    fallbackLng: \"en\",\r\n    debug: true,\r\n    whitelist: Languages,\r\n\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./i18n.js\";\n\nReactDOM.render(\n  <Suspense fallback={<div>Loading...</div>}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Suspense>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}